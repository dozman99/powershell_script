# @format

name: Backup VM image to NFS
on:
  workflow_call:
    # INPUTS REQUIRED FROM CALLING WORKFLOW - please keep inputs lower case and in alphabetical order lower case
    #
    # backup_destination_path
    # backup_workspace
    # hyperv_host_label
    # vm_name
    #
    # SECRETS REQUIRED FROM CALLING WORKFLOW - please keep secret names all UPPER_CASE and in alphabetical order
    #
    # BACKUP_JOB_PW
    # BACKUP_JOB_USER
    inputs:
      backup_destination_path:
        description: location to transfer VM image backup
        required: true
        type: string
      backup_workspace:
        description: directory on local machine where backup work is done
        required: true
        type: string
      export_path:
        description: path to export vm for export vm cmd
        default: .
        required: false
        type: string
      hyperv_host_label:
        description: Label of host where vm lives, must be connected to repo conducting backup as runner
        required: true
        type: string
      map_drive:
        description: A - Z to represent mapping of share location
        default: 'B:'
        required: false
        type: string
      nfs_address:
        description: nfs_address - ip address / dns of NFS used for backup
        default: \\J2892S50.go.johnsoncontrols.com\Temp
        required: false
        type: string
      vm_name:
        description: name of vm for backup
        required: true
        type: string
    secrets:
      BACKUP_JOB_USER:
        description: user with permissions for NFS
        required: true
      BACKUP_JOB_PW:
        description: user pw for NFS access
        required: true

jobs:
  Backup:
    runs-on: [self-hosted, Windows, '${{ inputs.hyperv_host_label }}']
    steps:
      - name: Run Backup Task
        run: |
          cd ${{ inputs.backup_workspace }}
          Export-Vm -Name "${{ inputs.vm_name }}" -Path "${{ inputs.export_path }}"
          dir

      - name: Copy Backup to Share Drive
        run: |
          # This job copies the image to the NFS file share by mapping the drive
          # with NFS credentials 


          # If drive hasn't been mapped, Map the drive 
          if ( -not (Test-Path -Path "${{ inputs.map_drive }}\") ) {
          net use ${{ inputs.map_drive }} /delete
          net use ${{ inputs.map_drive }} ${{ inputs.nfs_address }} /u:${{ secrets.BACKUP_JOB_USER }} "${{ secrets.BACKUP_JOB_PW }}"
          net use
          }

          if ( -not (Test-Path -Path "${{ inputs.map_drive }}\${{ inputs.backup_destination_path }}") ) {
          mkdir ${{ inputs.map_drive }}\${{ inputs.backup_destination_path }}
          }
          # clean up previous backup
          Remove-Item ${{ inputs.map_drive }}\${{ inputs.backup_destination_path }}\* -Force -Recurse -ErrorAction:Ignore
          # create new directory for backup
          mkdir ${{ inputs.map_drive }}\${{ inputs.backup_destination_path }}\$timestamp

          robocopy ${{ inputs.backup_workspace }}\${{ inputs.vm_name }} ${{ inputs.map_drive }}\${{ inputs.backup_destination_path }}\$timestamp\ /E 

          # As seen in other CI/CD platforms ( Azure, jenkins, ..) with powershell scripting
          # robocopy can cause false pipeline failures - these two exits prevent 
          # the false alarm 
          if( -not $?) { 
          Write-Host "$Error[0].Exception.Message Error found "
          exit
          }
          ### parse robocopy error code to stop it killing the pipeline ###
          exit ($LastExitCode -band 24)

      - name: Cleanup Local Backup Workspace
        if: ${{ always() }}
        run: |
          cd ${{ inputs.backup_workspace }}
          Remove-Item -Path ${{ inputs.vm_name }} -Recurse
