# @format

name: Tag and Cleanup Images
on:
  workflow_dispatch:
    inputs:
      image_name:
        description: Name of the image to tag
        required: true
        type: string
      semantic_version:
        description: Semantic version to locate the build
        required: true
        type: string
      tag:
        description: Tag to apply to the image
        default: 'gold'
        required: true
        type: string
      retention_period:
        description: in days after which it will be deleted 
        required: true
        type: number
      nfs_address:
        description: The NFS server address
        required: true
        type: string
      on_prem_map_drive:
        description: Drive letter for mounting the on-premises network drive
        default: 'B:'
        required: false
        type: string
      build_path:
        description: Base path where builds are located
        required: true
        type: string
      azure_file_share_path:
        description: Azure File Share path
        default: build
        required: true
        type: string
      resource_group:
        description: Azure Resource Group
        required: true
        type: string


jobs:
  cull-On-Premises:
    runs-on: [self-hosted, Windows, C2892M312]
    steps:
      - name: Mount On-Prem Network Drive
        run: |
          net use ${{ inputs.on_prem_map_drive }} /delete /yes
          net use ${{ inputs.on_prem_map_drive }} ${{ inputs.nfs_address }} /u:${{ secrets.ONPREM_SA_USER }} "${{ secrets.ONPREM_SA_PASS }}"
          net use

      - name: Tag the Image On-Premises
        shell: pwsh
        run: |
          $buildPath = Join-Path "${{ inputs.build_path }}"  "UC_${{ inputs.semantic_version }}"
          Write-Host "Build Path: $buildPath"

          if ($buildPath -notmatch '${{ inputs.tag }}') {
            $newBuildPath = "$buildPath" + "-${{ inputs.tag }}"
            Rename-Item -Path $buildPath -NewName $newBuildPath
          }

          Write-Host "Files in the ${{ inputs.build_path }} directory:"
          Get-ChildItem -Path "${{ inputs.build_path }}" | Select-Object -ExpandProperty Name
          Write-Host "Files processed successfully."

      - name: Delete Old Directories from On-Premises
        run: |
          $directoryPath = ${{ inputs.build_path }}
          $threshold = (Get-Date).AddDays(-${{ inputs.retention_period }})

          Write-Host "Checking for directories in $directoryPath older than $threshold..."

          Get-ChildItem -Path $directoryPath -Directory -Recurse | Where-Object {
            $_.LastWriteTime -lt $threshold -and $_.Name -notmatch "${{ inputs.tag }}"
          } | ForEach-Object {
            Write-Host "Deleting directory: $($_.FullName)"
            Remove-Item -Path $_.FullName -Recurse -Force
          }

          Write-Host "Old directories and their contents deleted from the on-premises network drive."

      - name: Unmount Network Drives
        if: ${{ always() }}
        run: |
          try {
              net use ${{ inputs.on_prem_map_drive }} /delete /yes
              Write-Host "Network drives cleaned up."
          } catch {
              Write-Error "Failed to clean up network drives: $_"
              exit 1
          }

  cull-image-az-fileshare:
    runs-on: [self-hosted, Windows, C2892M312]
    steps:
      - run: |
          Write-Host "Setting up environment variables..."
          AzCopyZipUrl = "https://aka.ms/downloadazcopy-v10-windows"
          AzCopyZipPath = "AzCopy.zip"
          AzCopyInstallPath = "C:\Program Files\AzCopy"
          $azurePath = "https://ospclouddevccurebuilds.file.core.windows.net/ospclouddevccurefileshare/${{ inputs.azure_file_share_path }}?${{ secrets.SAS_TOKEN }}"

          function Install-AzCopy {
              Write-Host "Downloading AzCopy..." -ForegroundColor Green
              Invoke-WebRequest -Uri $AzCopyZipUrl -OutFile $AzCopyZipPath -UseBasicParsing

              Write-Host "Extracting AzCopy..." -ForegroundColor Green
              Expand-Archive -Path $AzCopyZipPath -DestinationPath $AzCopyInstallPath -Force

              Write-Host "Cleaning up AzCopy download files..." -ForegroundColor Green
              Remove-Item -Path $AzCopyZipPath -Force

              $global:azCopyPath = (Get-ChildItem $AzCopyInstallPath -Directory | Sort-Object LastWriteTime -Descending | Select-Object -First 1).FullName + "\azcopy.exe"
              if (!(Test-Path $global:azCopyPath)) {
                  Write-Error "AzCopy installation failed. Ensure the file exists in '$AzCopyInstallPath'."
                  Exit 1
              }
              Write-Host "AzCopy installed at $global:azCopyPath" -ForegroundColor Green
          }

          # Call the Install-AzCopy function
          Install-AzCopy

          Write-Host "Deleting folders in AZ fileshare"
          $global:azCopyPath remove $azurePath --recursive=true



  cull-image-gallery:
    runs-on: [self-hosted, Windows, C2892M312]
    steps:
      - name: Azure login
        uses: azure/login@v2
        with:
          auth-type: IDENTITY
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Tag the Image on Image Gallery
        shell: pwsh
        run: |
          # Define input variables
          $imageName = "ccure-image-vm"
          $tag = "${{ inputs.tag }}"
          $resourceGroup = "${{ inputs.resource_group }}"
          $imageGalleryName = "CCURE_image_galley"

          Write-Host "Tagging image: $imageName with tag: $tag"

          # Update the image version with the specified tag
          az sig image-version update `
            --resource-group $resourceGroup `
            --gallery-name $imageGalleryName `
            --gallery-image-definition $imageName `
            --set tags.ccure=$tag `
            --set publishingProfile.excludeFromLatest=false

          Write-Host "Image tagged successfully in Azure Image Gallery."

      - name: Delete Old Images from Image Gallery
        shell: pwsh
        run: |
          # Define input variables
          $thresholdDate = (Get-Date).AddDays(-${{ inputs.retention_period }}).ToString("yyyy-MM-dd'T'HH:mm:ss'Z'")
          $resourceGroup = "${{ inputs.resource_group }}"
          $imageGalleryName = "CCURE_image_galley"
          $imageName = "ccure-image-vm"

          Write-Host "Threshold date for deletion: $thresholdDate"
          Write-Host "Fetching old image versions from Image Gallery: $imageGalleryName, Image: $imageName"

          # List and delete old image versions
          az sig image-version list `
            --resource-group $resourceGroup `
            --gallery-name $imageGalleryName `
            --gallery-image-definition $imageName `
            --query "[?publishingProfile.publishedDate < '$thresholdDate' && !(tags.ccure == 'gold')].[name]" `
            --output tsv | ForEach-Object {
              Write-Host "Deleting image version: $_"
              az sig image-version delete `
                --resource-group $resourceGroup `
                --gallery-name $imageGalleryName `
                --gallery-image-definition $imageName `
                --gallery-image-version $_
            }

          Write-Host "Old image versions deleted successfully from Azure Image Gallery."
