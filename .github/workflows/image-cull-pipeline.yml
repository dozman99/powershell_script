# @format

name: Tag and Cleanup Images
on:
  workflow_dispatch:
    inputs:
      image_name:
        description: Name of the image to tag
        required: true
        type: string
      tag:
        description: Tag to apply to the image
        default: 'gold'
        required: true
        type: string
      on_prem_map_drive:
        description: Drive letter for mounting the on-premises network drive
        default: 'B:'
        required: false
        type: string
      nfs_address:
        description: The NFS server address
        required: true
        type: string
      azure_file_share_path:
        description: Azure File Share path
        required: true
        type: string
      image_gallery_name:
        description: Azure Image Gallery name
        required: true
        type: string
      resource_group:
        description: Azure Resource Group
        required: true
        type: string
      retention_period:
        description: Azure Resource Group
        default: 2
        required: true
        type: number

jobs:
  # cull-On-Premises:
  #   runs-on: [self-hosted, Windows, C2892M312]
  #   steps:
  #     - name: Mount On-Prem Network Drive
  #       run: |
  #         net use ${{ inputs.on_prem_map_drive }} /delete /yes
  #         net use ${{ inputs.on_prem_map_drive }} ${{ inputs.nfs_address }} /u:${{ secrets.ONPREM_SA_USER }} "${{ secrets.ONPREM_SA_PASS }}"
  #         net use

  #     - name: Tag the Image On-Premises
  #       shell: pwsh
  #       run: |
  #         $buildPath = Join-Path "${{ inputs.build_path }}"  "UC_${{ inputs.semantic_version }}"
  #         Write-Host "Build Path: $buildPath"

  #         if ($buildPath -notmatch '${{ inputs.tag }}') {
  #           $newBuildPath = "$buildPath" + "-${{ inputs.tag }}"
  #           Rename-Item -Path $buildPath -NewName $newBuildPath
  #           $buildPath = $newBuildPath
  #         }

  #         Write-Host "Files in the ${{ inputs.build_path }} directory:"
  #         Get-ChildItem -Path "${{ inputs.build_path }}" | Select-Object -ExpandProperty Name
  #         Write-Host "Files processed successfully."

  #     - name: Delete Old Images from On-Premises
  #       run: |
  #         $directoryPath = "${{ inputs.on_prem_map_drive }}"
  #         $threshold = (Get-Date).AddDays(-${{ inputs.retention_period }})
  #         Get-ChildItem -Path $directoryPath -Recurse -File | Where-Object {
  #           $_.LastWriteTime -lt $threshold -and $_.Name -notmatch "${{ inputs.tag }}"
  #         } | Remove-Item -Force
  #         Write-Host "Old images deleted from on-premises network drive."

  #     - name: Unmount Network Drives
  #       if: ${{ always() }}
  #       run: |
  #         try {
  #             net use ${{ inputs.on_prem_map_drive }} /delete /yes
  #             Write-Host "Network drives cleaned up."
  #         } catch {
  #             Write-Error "Failed to clean up network drives: $_"
  #             exit 1
  #         }

  cull-image-az-fileshare:
    # runs-on: [self-hosted, Windows, C2892M312]
    runs-on: windows-latest
    steps:
      - run: |
          Write-Host "Setting up environment variables..."
          $global:AzCopyZipUrl = "https://aka.ms/downloadazcopy-v10-windows"
          $global:AzCopyZipPath = "AzCopy.zip"
          $global:AzCopyInstallPath = "C:\Program Files\AzCopy"

          function Install-AzCopy {
              Write-Host "Downloading AzCopy..." -ForegroundColor Green
              Invoke-WebRequest -Uri $global:AzCopyZipUrl -OutFile $global:AzCopyZipPath -UseBasicParsing

              Write-Host "Extracting AzCopy..." -ForegroundColor Green
              Expand-Archive -Path $global:AzCopyZipPath -DestinationPath $global:AzCopyInstallPath -Force

              Write-Host "Cleaning up AzCopy download files..." -ForegroundColor Green
              Remove-Item -Path $global:AzCopyZipPath -Force

              $global:azCopyPath = (Get-ChildItem $global:AzCopyInstallPath -Directory | Sort-Object LastWriteTime -Descending | Select-Object -First 1).FullName + "\azcopy.exe"
              if (!(Test-Path $global:azCopyPath)) {
                  Write-Error "AzCopy installation failed. Ensure the file exists in '$global:AzCopyInstallPath'."
                  Exit 1
              }
              Write-Host "AzCopy installed at $global:azCopyPath" -ForegroundColor Green
          }

          function Delete-OldFoldersFromAzureFileShare {
              param (
                  [string]$azurePath,
                  [int]$retentionPeriod
              )

              $threshold = (Get-Date).AddDays(-$retentionPeriod)

              Write-Host "Retrieving folders older than $threshold in Azure File Share..."

              $global:azCopyPath list "$azurePath" --output json | ConvertFrom-Json | ForEach-Object {
                  $itemName = $_.name
                  $itemPath = "$azurePath/$itemName"
                  $lastModified = Get-Date $_.lastModified

                  if ($lastModified -lt $threshold) {
                      Write-Host "Deleting folder: $itemPath"
                      $global:azCopyPath remove "$itemPath" --recursive=true
                  }
              }
              Write-Host "Old folders deleted from Azure File Share using azcopy."
          }

          # Call the Install-AzCopy function
          Install-AzCopy

          # Define the Azure File Share path and retention period
          $azurePath = "${{ inputs.azure_file_share_path }}"
          $retentionPeriod = ${{ inputs.retention_period }}

          # Call the Delete-OldFoldersFromAzureFileShare function
          Delete-OldFoldersFromAzureFileShare -azurePath $azurePath -retentionPeriod $retentionPeriod


  cull-image-gallery:
    # runs-on: [self-hosted, Windows, C2892M312]
    runs-on: windows-latest
    steps:
      - name: Azure login
        uses: azure/login@v2
        with:
          auth-type: IDENTITY
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Tag the Image on image-gallery
        shell: pwsh
        run: |
          $imageName = "${{ inputs.image_name }}"
          $tag = "${{ inputs.tag }}"
          Write-Host "Tagging image: $imageName with tag: $tag"

          $resourceGroup = "${{ inputs.resource_group }}"
          $galleryName = "${{ inputs.image_gallery_name }}"

          az sig image-version update \
            --resource-group $resourceGroup \
            --gallery-name $galleryName \
            --gallery-image-definition $imageName \
            --set tags.ccure=${{ inputs.tag }} \
            --set publishingProfile.excludeFromLatest=false #Change whether an image should be included in consideration for latest version in the image definition

          Write-Host "Image tagged successfully in Azure Image Gallery."

      - name: Delete Old Images from Image Gallery
        shell: pwsh
        run: |
          $thresholdDate = (Get-Date).AddDays(-${{ inputs.retention_period }}).ToString("yyyy-MM-dd'T'HH:mm:ss'Z'")
          az sig image-version list `
            --resource-group "${{ inputs.resource_group }}" `
            --gallery-name "${{ inputs.image_gallery_name }}" `
            --gallery-image-definition "${{ inputs.image_name }}" `
            --query "[?publishingProfile.publishedDate<'$thresholdDate' && !tags.ccure=='gold'].[name]" `
            --output tsv |
          ForEach-Object {
            Write-Host "Deleting image version: $_"
            az sig image-version delete `
              --resource-group "${{ inputs.resource_group }}" `
              --gallery-name "${{ inputs.image_gallery_name }}" `
              --gallery-image-definition "${{ inputs.image_name }}" `
              --gallery-image-version $_