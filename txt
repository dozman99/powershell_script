source. networkdrive 
  $buildPath = Join-Path ${{ inputs.build_path }} "UC_${{ inputs.semantic_version }}"

destination runner 



  "${{ env.TEMP_DIR }}"


source. runner 
  $SourcePath = Join-Path "${{ env.TEMP_DIR }}" "UC_${{ inputs.semantic_version }}"

destination runner 
  $sourceUri = "https://ospclouddevccurebuilds.file.core.windows.net/ospclouddevccurefileshare/${{ inputs.azure_file_share_dest_path }}?${{ secrets.SAS_TOKEN }}"







 image creation
source. azure 
  $sourceUri = "https://ospclouddevccurebuilds.file.core.windows.net/ospclouddevccurefileshare/${{ inputs.azure_file_share_dest_path }}?${{ secrets.SAS_TOKEN }}"

destination runner 
'DestinationPath=C:\\Users\\${{ secrets.ADMIN_USERNAME }}\\Desktop\\build'




name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up PowerShell
      uses: actions/setup-powershell@v2

    - name: Install AzCopy
      run: |
        $SourcePath = Join-Path "${{ env.TEMP_DIR }}" "UC_${{ github.sha }}"
        $AzCopyZipUrl = "https://aka.ms/downloadazcopy-v10-windows"
        $AzCopyZipPath = "AzCopy.zip"
        $AzCopyInstallPath = "C:\Program Files\AzCopy"
        $destinationUri = "https://ospclouddevccurebuilds.file.core.windows.net/ospclouddevccurefileshare/${{ secrets.AZURE_FILE_SHARE_DEST_PATH }}?${{ secrets.SAS_TOKEN }}"

        function Install-AzCopy {
            Write-Host "Downloading AzCopy..." -ForegroundColor Green
            Invoke-WebRequest -Uri $AzCopyZipUrl -OutFile $AzCopyZipPath -UseBasicParsing

            Write-Host "Extracting AzCopy..." -ForegroundColor Green
            Expand-Archive -Path $AzCopyZipPath -DestinationPath $AzCopyInstallPath -Force

            Write-Host "Cleaning up AzCopy download files..." -ForegroundColor Green
            Remove-Item -Path $AzCopyZipPath -Force

            $global:azCopyPath = (Get-ChildItem $AzCopyInstallPath -Directory | Sort-Object LastWriteTime -Descending | Select-Object -First 1).FullName + "\azcopy.exe"
            if (!(Test-Path $global:azCopyPath)) {
                Write-Error "AzCopy installation failed. Ensure the file exists in '$AzCopyInstallPath'."
                Exit 1
            }
            Write-Host "AzCopy installed at $global:azCopyPath" -ForegroundColor Green
        }

        function Copy-Files {
            Write-Host "Copying files from local directory to the Azure File Share using AzCopy..." -ForegroundColor Green
            try {
                Start-Process -FilePath $global:azCopyPath -ArgumentList @("copy", "$SourcePath", "$destinationUri" , "--recursive", "--preserve-smb-info=true") -NoNewWindow -Wait
                Write-Host "Files copied successfully from $SourcePath." -ForegroundColor Green
            } catch {
                Write-Error "File copy failed: $_.Exception.Message"
                Exit 1
            }
        }

        function Cleanup-TempDirectory {
            Write-Host "Cleaning up temporary directory..." -ForegroundColor Green
            try {
                if (Test-Path "${{ env.TEMP_DIR }}") {
                    Remove-Item -Path "${{ env.TEMP_DIR }}" -Recurse -Force
                    Write-Host "Temporary directory cleaned up." -ForegroundColor Green
                }
            } catch {
                Write-Error "Failed to clean up temporary directory: $_.Exception.Message"
                exit 1
            }
        }

        Install-AzCopy
        Copy-Files
        Cleanup-TempDirectory



- name: Fetch Build
  run: |
    # Define the build path
    $buildPath = Join-Path ${{ inputs.build_path }} "UC_${{ inputs.semantic_version }}"

    # List files in the build path
    Get-ChildItem -Path $buildPath | Select-Object -ExpandProperty

    # Display the build path
    Write-Host "Build Path: $buildPath"

    # Calculate file hash and save it to a file
    Write-Host "Calculating FileHash"
    Get-FileHash -Path "$buildPath" -Algorithm SHA256 | Out-File -FilePath "${{ env.TEMP_DIR }}\\build_checksum.txt"

    # Create the temporary directory if it doesn't exist
    New-Item -Path "${{ env.TEMP_DIR }}" -ItemType Directory -Force

    # Copy files to the temporary directory
    Write-Host "Copying files to the temporary directory..."
    Copy-Item -Path "$buildPath" -Destination "${{ env.TEMP_DIR }}" -Recurse

    # List files in the temporary directory to verify the copy
    Get-ChildItem -Path "${{ env.TEMP_DIR }}" | Select-Object -ExpandProperty

    # Indicate success
    Write-Host "Files copied successfully"




- name: Fetch Build
  run: |
    # Define the build path
    $buildPath = Join-Path ${{ inputs.build_path }} "UC_${{ inputs.semantic_version }}"

    # List files in the build path
    Get-ChildItem -Path $buildPath | Select-Object -ExpandProperty

    # Display the build path
    Write-Host "Build Path: $buildPath"

    # Calculate file hash and save it to a file
    Write-Host "Calculating FileHash"
    $originalHash = Get-FileHash -Path "$buildPath" -Algorithm SHA256
    $originalHash | Out-File -FilePath "${{ env.TEMP_DIR }}\\build_checksum.txt"

    # Create the temporary directory if it doesn't exist
    New-Item -Path "${{ env.TEMP_DIR }}" -ItemType Directory -Force

    # Copy files to the temporary directory
    Write-Host "Copying files to the temporary directory..."
    Copy-Item -Path "$buildPath" -Destination "${{ env.TEMP_DIR }}" -Recurse

    # List files in the temporary directory to verify the copy
    Get-ChildItem -Path "${{ env.TEMP_DIR }}" | Select-Object -ExpandProperty

    # Verify the hash file after copy
    Write-Host "Verifying FileHash after copy"
    $copiedHash = Get-FileHash -Path "${{ env.TEMP_DIR }}\\build_checksum.txt" -Algorithm SHA256
    if ($originalHash.Hash -eq $copiedHash.Hash) {
        Write-Host "Hash verification successful: $($originalHash.Hash)"
    } else {
        Write-Error "Hash verification failed. Original: $($originalHash.Hash), Copied: $($copiedHash.Hash)"
        Exit 1
    }

    # Indicate success
    Write-Host "Files copied and verified successfully"
